# Define workflow name
name: Build PeDitXrt with Date

# Define event triggers
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

# Define environment variables
env:
  REPO_URL: https://github.com/peditx/PeDitXrt
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Tehran
  # New variables
  BUILD_DATE: $(date +'%Y%m%d')
  BUILD_VERSION: $(date +'%Y%m%d')-pdx

# Define jobs
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        git pull

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls

    - name: Clean up banner file
      run: |
       rm openwrt/package/base-files/files/etc/banner
       touch openwrt/package/base-files/files/etc/banner
 
    - name: Download new banner file
      run: |
       curl -o openwrt/package/base-files/files/etc/banner https://raw.githubusercontent.com/peditx/PeDitXrt/openwrt-21.02/package/base-files/files/etc/banner

    - name: Build PeDitXrt
      if: |
       github.ref == 'refs/heads/openwrt-21.02' &&
       github.event_name == 'repository_dispatch' &&
       env.UPLOAD_FIRMWARE == 'true' &&
       !cancelled()
    env:
     SSH: ${{ github.event.inputs.ssh }}
     run: |
      cd openwrt
      mkdir bin/FIRMWARE
      mkdir bin/MD5SUM
      make -j$(nproc) download V=s || true
      make -j$(nproc) V=s || true
      echo -e "\nDone!\n"
      echo -e "The bin files and md5 files are in $(pwd)/bin\n"
      ls -lh bin/*

         - name: Set CopyRight to PeDitX
          run: |
           sed -i 's/COPYRIGHT/PeditX/g' openwrt/package/base-files/files/etc/banner

      - name: Update wifi default state to on
        run: |
         sed -i 's/disabled=1/disabled=0/g' openwrt/package/kernel/mac80211/files/lib/wifi/mac80211.sh

      - name: Update kernel version to latest stable release
        run: |
         cd openwrt
         ./scripts/feeds update -a
         ./scripts/feeds install -a
         make kernel_menuconfig
         sed -i "s/KERNEL_PATCHVER:=.*/KERNEL_PATCHVER:=5.10/g" openwrt/target/linux/x86/Makefile
  
  
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
       with:
          keep_latest: 3
          delete_tags: true
         env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN
